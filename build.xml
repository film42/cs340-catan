<project name="Our Server" default="server" basedir=".">

	<!-- PROPERTIES -->
	<!-- ********** -->

	<!-- Directory paths for the java server, javascript, and dest dir for the student copy -->
    <property name="port.arg" value="8081"/>
    <property name="web.arg" value="gameplay"/>
    <property name="requests.arg" value="ug"/>

    <!-- Base output folder -->
    <property name="dest.dir" value="docs"/>
    <!-- YUIDoc output Folder -->
    <property name="yuidoc.dir" value="${dest.dir}/javascript"/>
    <!-- Jar file path/name from here -->
    <property name="jar.file" value="server.jar"/>
    <!-- javascript source Folder -->
    <property name="javascript.dir" value="${web.arg}/js"/>

    <!-- PROPERTIES -->
    <!-- ********** -->

    <property name="lib" location="server/lib"/>
    <property name="build" location="server/ant-build"/>
    <property name="test" location="server/test"/>
    <property name="src" location="server/src"/>
    <property name="test-build" location="server/test-build"/>
    <property name="test-reports" location="server/test-reports"/>

    <path id="lib-classpath">
        <fileset dir="${lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="server-lib-classpath">
        <fileset dir="${lib}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="all-classpath">
        <path refid="lib-classpath"/>
        <pathelement location="${build}"/>
    </path>

    <path id="server-classpath">
        <path refid="server-lib-classpath"/>
        <pathelement location="${build}"/>
    </path>

    <!-- Base output folder -->
    <property name="dest.dir" value="docs"/>
    <!-- YUIDoc output Folder -->
    <property name="yuidoc.dir" value="${dest.dir}/javascript"/>
    <!-- Jar file path/name from here -->
    <property name="jar.file" value="server.jar"/>
    <!-- javascript source Folder -->
    <property name="javascript.dir" value="${web.arg}/js"/>

    <property name="junit-home" location="${lib}" />

    <property name="cobertura-home" location="${lib}/cobertura-2.0.3"/>
    <property name="coverage-build" location="coverage-build"/>
    <property name="coverage-reports" location="coverage-reports"/>
    <property name="coverage-data-file" location="${coverage-reports}/cobertura.ser"/>

    <path id="cobertura-classpath">
      <fileset dir="${cobertura-home}">
        <include name="cobertura-2.0.3.jar" />
      </fileset>
      <fileset dir="${cobertura-home}/lib">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <path id="junit-classpath">
    <fileset dir="${junit-home}">
      <include name="junit-4.8.2.jar" />
    </fileset>
  </path>

  <!-- ***************** -->
  <!-- task definintions -->
  <!-- ***************** -->
  <taskdef classpathref="cobertura-classpath" resource="tasks.properties" />


	<!-- TARGETS -->
	<!-- ******* -->
  <target name="our-server" depends="compile" description="Runs the student server">
      <java classname="server.Server" fork="yes" dir="server">
          <arg value="${port.arg}"/>
          <arg value="${web.arg}"/>
          <arg value="${requests.arg}"/>
          <classpath>
              <path refid="server-classpath"/>
          </classpath>
          <assertions>
              <enable/>
          </assertions>
      </java>
  </target>

  <target name="init" description="create build directories">
      <tstamp/>
      <mkdir dir="${build}"/>
      <mkdir dir="${test-build}"/>
      <mkdir dir="${test-reports}"/>
      <mkdir dir="${coverage-build}"/>
      <mkdir dir="${coverage-reports}"/>
  </target>

  <target name="clean"
        description="clean build files" >
    <delete dir="${build}"/>
    <delete dir="${test-build}"/>
    <delete dir="${test-reports}"/>
    <delete dir="${coverage-build}"/>
    <delete dir="${coverage-reports}"/>
  </target>

  <target name="compile" depends="init" description="compile the source code">
      <javac srcdir="${src}" target="1.7" source="1.7" classpathref="lib-classpath" destdir="${build}" debug="true" includeantruntime="true">
        <compilerarg line="-encoding utf-8"/>
      </javac>
      <javac srcdir="${test}" target="1.7" source="1.7" classpathref="lib-classpath" destdir="${build}" debug="true" includeantruntime="true" />
  </target>

  <target name="tests" depends="compile" description="run automated server tests">
    <java classname="driver.TestDriver" fork="yes"  dir="server">
        <classpath>
            <path refid="all-classpath"/>
        </classpath>
        <assertions>
            <enable/>
        </assertions>
    </java>
  </target>

  <target name="instrument" depends="compile"
    description="instrument class files for code coverage analysis">
    <cobertura-instrument ignoreTrivial="true" />
    <cobertura-instrument todir="${coverage-build}" datafile="${coverage-data-file}">
      <fileset dir="${build}">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="compile-tests" depends="instrument"
    description="compile unit tests " >
    <javac srcdir="${test}" destdir="${test-build}" debug="true">
      <classpath>
        <pathelement location="${coverage-build}"/>
        <pathelement location="${build}"/>
      </classpath>
      <classpath refid="junit-classpath" />
      <classpath refid="cobertura-classpath" />
    </javac>
  </target>

	<target name="server" description="Runs the demo server">
		<java jar="${jar.file}" fork="true">
			<arg value="${port.arg}"/>
			<arg value="${web.arg}"/>
			<arg value="${requests.arg}"/>
			<assertions>
				<enable/>
			</assertions>
		</java>
	</target>

  <target name="test" depends="compile-tests"
    description="run unit tests">
    <junit fork="no" printsummary="yes" haltonfailure="no">
      <jvmarg value="-XX:-UseSplitVerifier"/>
      <classpath>
        <pathelement location="${coverage-build}"/>
        <pathelement location="${build}"/>
        <pathelement location="${test-build}"/>
      </classpath>
      <classpath refid="cobertura-classpath" />
      <classpath refid="junit-classpath" />

      <sysproperty key="net.sourceforge.cobertura.datafile"
        value="${coverage-data-file}"/>

      <formatter type="plain"/>

      <batchtest fork="yes" todir="${test-reports}">
        <fileset dir="${test}">
          <include name="**/*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="coverage" depends="test"
    description="generate unit test coverage report">
    <cobertura-report srcdir="${src}" destdir="${coverage-reports}"
      datafile="${coverage-data-file}"/>
  </target>

  <target name="make-js-doc" description="Parse and produce the javascript docs">
      <echo> Making javascript documentation</echo>
      <exec executable="yuidoc">
          <arg value="-o"/>
          <arg value="${yuidoc.dir}"/>
          <arg value="${javascript.dir}"/>
      </exec>
	</target>
</project>
